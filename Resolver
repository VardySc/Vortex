-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

local LocalPlayer = Players.LocalPlayer
local scriptEnabled = false
local connection

-- Create Resolver GUI
local ResolverGui = Instance.new("ScreenGui")
local ResolverButton = Instance.new("TextButton")

-- Parent GUI to CoreGui
ResolverGui.Parent = game.CoreGui

-- Button Properties
ResolverButton.Parent = ResolverGui
ResolverButton.Size = UDim2.new(0, 150, 0, 50)
ResolverButton.Position = UDim2.new(0.5, -75, 0.1, 0) -- Centered
ResolverButton.Text = "Resolver OFF"
ResolverButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ResolverButton.TextSize = 18
ResolverButton.Font = Enum.Font.Arcade
ResolverButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
ResolverButton.BorderSizePixel = 0

-- Rounded Corners
local corner = Instance.new("UICorner")
corner.CornerRadius = UDim.new(0, 16)
corner.Parent = ResolverButton

-- **Draggable Button Logic**
local dragging, startPos, startMousePos

ResolverButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        startPos = ResolverButton.Position
        startMousePos = input.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

ResolverButton.InputChanged:Connect(function(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - startMousePos
        ResolverButton.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
end)

-- **Optimized Resolver Function (Anti-Lock Recalculation)**
local function RecalculateTarget(target)
    if not target or not target:FindFirstChild("HumanoidRootPart") then return end

    local root = target.HumanoidRootPart
    local velocity = root.Velocity
    local moveDirection = root.CFrame.lookVector

    -- Detect and correct sudden movement direction changes (Anti-Lock bypass)
    local speed = velocity.Magnitude
    local predictedMove = moveDirection * speed

    -- Apply smoothing based on velocity and acceleration
    local recalculatedPosition = root.Position + predictedMove + (velocity * 0.05)

    return recalculatedPosition
end

-- **Apply Resolver Fixes Every Frame**
local function onRenderStep()
    for _, Target in pairs(Players:GetPlayers()) do
        if Target ~= LocalPlayer then
            local Character = Target.Character
            if Character then
                local RootPart = Character:FindFirstChild("HumanoidRootPart")
                local Humanoid = Character:FindFirstChildOfClass("Humanoid")

                if RootPart and Humanoid and Humanoid.MoveDirection.Magnitude > 0 then
                    local recalculatedPos = RecalculateTarget(Target)
                    
                    -- Apply movement correction
                    if recalculatedPos then
                        RootPart.CFrame = CFrame.new(recalculatedPos)
                    end
                end
            end
        end
    end
end

-- **Toggle Resolver**
local function toggleResolver()
    scriptEnabled = not scriptEnabled

    if scriptEnabled then
        ResolverButton.Text = "Resolver ON"
        ResolverButton.BackgroundColor3 = Color3.fromRGB(0, 200, 200)

        -- Start resolver loop (Run every frame)
        connection = RunService.RenderStepped:Connect(onRenderStep)
        
        -- Show notification
        StarterGui:SetCore("SendNotification", {
            Title = "Resolver Activated",
            Text = "Resolving Anti-Lock...",
            Duration = 2
        })
    else
        ResolverButton.Text = "Resolver OFF"
        ResolverButton.BackgroundColor3 = Color3.fromRGB(0, 255, 255)

        -- Stop resolver loop
        if connection then
            connection:Disconnect()
            connection = nil
        end
        
        -- Show notification
        StarterGui:SetCore("SendNotification", {
            Title = "Resolver Disabled",
            Text = "Stopped resolving.",
            Duration = 2
        })
    end
end

-- **Connect Button Click to Toggle Function**
ResolverButton.MouseButton1Click:Connect(toggleResolver)
